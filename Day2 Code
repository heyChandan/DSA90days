//******************** Recursion *************************
//Day1
//******Print Natural number N - 1

void fun(int n){
  if(n==0) return;
  
  System.out.println(n);
  fun(n-1);
}

//************ print 1 - N

void fun(int n){
  if( n==0 ) return;
  
  fun(n-1);
  System.out.println(n);
}



//Day2  
//Check String for Pallindrom(Recursive method)

//Initialize beg = 0 , end = n-1
Boolean isPallindrom( String str, int beg, int end){
  if(start >= end)
    return false;
    
   return (str.charAT(beg) == str.charAt(end)) &&      //-> Short circuit op
   isPallindrom(str, beg+1, end-1);
}




// Sum of digits of a number

int getSum(int n){
  if(n == 0)
  return 0;
  
  return getSum(n/10) + n%10; 
}                                           //-> Aux space = O(d)  , as d(no of digits) no of function call stack created
                                            //   Time Comp = O(d)

// Alternative iterative code for sum of digits

int fun(int n)
{
  int sum = 0, num;
  while (num != 1){
  sum += num%10;
  sum /= 10;
  }
  return sum;             //-> Time Comp = O(d)
}                         //-> Aux space = O(1)







Tower of hanoi

void TOH(int n, char a, char b, char c){
  if(n == 1) 
    System.out.println("Move "+n+" from "+a+" to "+c);
    
  TOH(n-1, a, b, c);
  System.out.println("Move "+n+" from "+a+" to "+c);
  TOH(n-1, b, a, c)
}
